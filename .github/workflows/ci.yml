name: Continous Integration

on:
  push:
    branches: [ GPU ]
    paths:
      - '**.f90'
      - '**.fpp'
      - 'mfc.sh'
      - '**.py'
      - '**.yaml'
      - '**.yml'
      - 'golden.txt'
      - 'Makefile'
      - 'makefile'
      - 'CMakeLists.txt'
      - Dockerfile

  pull_request:
    branches: [ GPU ]

  workflow_dispatch:

jobs:
  tests:
    name:  CI Test Runner
    strategy:
      matrix:
        include:
          - os:   ubuntu-latest
            unix: true
          
          - os:   macos-latest
            unix: true
            gcc:  11
    runs-on: ${{ matrix.os }}
    steps:
      - name: Clone MFC
        uses: actions/checkout@v3
      - name: (${{ matrix.os }}) Fetch dependencies
        if: ${{ matrix.unix }}
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then sudo apt install tar wget make cmake gcc g++ python3 python3-dev "openmpi-*" libopenmpi-dev; fi
          if [[ "${{ matrix.os }}" == "macos-latest"  ]]; then brew install wget make python make cmake coreutils gcc@${{ matrix.gcc }}; fi
          if [[ "${{ matrix.os }}" == "macos-latest"  ]]; then brew install --build-from-source open-mpi; fi
        
      - name: (${{ matrix.os }}) Setup & Environment Variables
        if: ${{ matrix.unix }}
        run: |
          if [[ "${{ matrix.os }}" == "macos-latest"  ]]; then echo "HOMEBREW_CC=gcc-${{ matrix.gcc }}"  >> $GITHUB_ENV; fi
          if [[ "${{ matrix.os }}" == "macos-latest"  ]]; then echo "HOMEBREW_CXX=g++-${{ matrix.gcc }}" >> $GITHUB_ENV; fi
          if [[ "${{ matrix.os }}" == "macos-latest"  ]]; then echo "OMPI_MPICC=gcc-${{ matrix.gcc }}"   >> $GITHUB_ENV; fi
          if [[ "${{ matrix.os }}" == "macos-latest"  ]]; then echo "OMPI_CXX=g++-${{ matrix.gcc }}"     >> $GITHUB_ENV; fi
          if [[ "${{ matrix.os }}" == "macos-latest"  ]]; then echo "OMPI_FC=gfortran-${{ matrix.gcc }}" >> $GITHUB_ENV; fi

      - name: (${{ matrix.os }}) Test MFC
        if: ${{ matrix.unix }}
        run: |
          chmod +x ./mfc.sh
          ./mfc.sh test -j $(nproc) -m release-cpu
          rm -rf build

      - name: (${{ matrix.os }} - Docker) Build Image
        run:  docker build --tag mfc toolchain/

      - name: (${{ matrix.os }} - Docker) Test MFC
        run:  >
          docker run -it --mount type=bind,source="$(pwd)",target=/home/me/MFC
          mfc /bin/bash -c "cd MFC && ./mfc.sh test -j $(nproc) -m release-cpu"

      - name: Upload logs
        uses: actions/upload-artifact@v3
        if:   always()
        with:
          name: ${{ matrix.os }}
          path: |
            build/**/*.log
            tests/**/*.dat
            tests/**/*.out
            tests/**/*.inp
            tests/**/*.txt
            tests/*.txt
